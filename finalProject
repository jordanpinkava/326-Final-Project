"""An anagram game called 'Jepogram' which allows users to choose a 
theme to guess a word from a scramble of letters"""
import random
from argparse import ArgumentParser
import sys
import re

class Player:
    """Base player class for the anagram game.
    
    Attributes:
        name (str): the name of the player playing the game.
        guesses_made (list): the guesses made in the game
        incorrect_guesses (int): number of incorrect guesses available
        points (int): number of points the group has
        word_guessed (bool): whether or not the word has been guessed correctly
    """
    def __init__(self, player_name):
        """set attributes of the game
        Jordan

        Args:
            player_name (str): name of the player
            
        Side effects:
            guesses_made: list can be updated as game is played
            word_guessed: cna become true if word is guessed
        """
        self.name = player_name
        self.guesses_made = []
        self.incorrect_guesses = 3
        self.points = 0
        self.word_guessed = False


#Ben's code
class GameState:
    def __init__(self, theme=None):
        self.theme = theme
        self.possible_themes = ['sports', 'fruit', 'animals', 'countries']  
        self.scrambled_word = "" 
        
    #Ben: magic method; prints possible themes  
    def __str__(self):
        return f"Possible Themes: {', '.join(self.possible_themes)}"
    
     
    def get_theme(self):
        theme = input("Choose your theme: ")
        #raise value error if user doesn't input 'fruit' or 'animals'
        if theme not in self.possible_themes:
            raise ValueError("Invalid theme.")
        #sets theme to input
        self.theme = theme
        return self.theme
        
    
    #jordan function to play again
    def play_again(self):
        """asks player if they'd like to play our game again
        Jordan, conditional expression

        Returns:
            Bool: True if Y (yes), False is N. If True, the game will restart.
                If False, the program will stop running.
                
        Side effects:
            Will either stop the program or restart it.
        """
        play_again = input("Do you want to play the game again? Y/N: ")
        return True if play_again.upper() == "Y" else False
        

    def select_random_word(self):
        """Selects a random word from a file based on the current theme. 
        Luis', with and f-string techniques.

    Returns:
        str: A randomly selected word from the theme's word list.

    Raises:
        FileNotFoundError: If the file for the current theme's words does not exist.

    Side Effects:
        - Modifies the `word_list` attribute of the object to contain the selected word.
        - Modifies the `theme_list` attribute of the object to contain the current theme.
    """
        file_path = f'{self.theme}_words.txt'
        with open(file_path, 'r') as file:
            words = [line.strip() for line in file]
        random_word = random.choice(words)
        self.word_list = [random_word]
        self.theme_list = [self.theme]
        return random_word
    
    def get_past_dict(self):
        dict = {theme: word for theme, word in zip(self.theme_list, self.word_list)}
        for theme, word in dict.items():
            print(f"Your previous theme was: {theme}. The answer was: {word}.")

    def letters(self):
        """Generates a list of three random letters.
        Luis

    Returns:
        list: A list containing three randomly selected letters from the English alphabet.
    """
        letters1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 
        'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        random_letters = random.sample(letters1, 3) 
        return random_letters

        
    def scramble(self, random_word):
        """Scrambles a given word by appending three random letters to it and 
        shuffling the result.
        Luis

    Args:
        random_word (str): The word to be scrambled.

    Returns:
        None. The scrambled word is stored in the `scrambled_word` attribute of
        the object.

    Side Effects:
        - Modifies the `scrambled_word` attribute of the object to contain the 
        scrambled word.
    """
        random_letters = self.letters()
        random_word += ''.join(random_letters)
        shuffled_word = list(random_word)
        random.shuffle(shuffled_word)
        self.scrambled_word = shuffled_word

    
    def gameboard(self):
        """Displays our beautiful gameboard
        Michael, max()
        
        Side effects: Prints interface to sdout
        """
        max_length = max(52, len(self.scrambled_word) + 27)
        dashed_line = "-" * max_length
    
        padding = (max_length - 26 - len(self.scrambled_word)) // 2
    
        print(f'''{dashed_line}
    {' ' * padding}Welcome to Jeopogram
{' ' * padding}Your scramble is {self.scrambled_word}
{dashed_line}
    ''')
        

class Outcome:
    """
    This class works to determine the outcome of the game


    Attributes:
        score (int): The current score of each round
        word (str): the word being evaluated for each round
        letter_dict (dict): a dictionary to map the letters of word to evaluate it to a corresponding score

    Methods:
        __init__ (self, word):
            handles an outcome instance when given a word.

        __str__(self):
            just prints the potential score prior to guess.

        calculatePotentialScore(self):
            calculates and returns the score for the mapped word.

        wordVerification(self, word):
            uses regular expressions to check if the word only uses letter characters and updates score. 

        results(self, guesses, answered, name = "User"):
            prints the outcome of the game. 

        gameplay(self, word, guesses, name="User):
            this handles the users guesses and answers.

        get_total(self):
            Returns the total score once the player "quits".
    """
    def __init__(self, word): 
        """
        Handles an Outcome when given the random word from text file
        Gabrielle

        Args: 
            word (str): The word given
        """
        self.score = 0
        self.word = word.lower()
        self.letter_dict = {
    'a': 3,
    'b': 2,
    'c': 1,
    'd': 1,
    'e': 3,
    'f': 2,
    'g': 2,
    'h': 1,
    'i': 3,
    'j': 5,
    'k': 6,
    'l': 3,
    'm': 2,
    'n': 2,
    'o': 5,
    'p': 2,
    'q': 5,
    'r': 2,
    's': 2, 
    't': 1,
    'u': 2,
    'v': 5,
    'w': 3,
    'x': 2,
    'y': 5,
    'z': 10
    }

    def __str__(self):
        """
        Prints potential score for the word. is also a magic method 
        Gabrielle
        """
        self.calculatePotentialScore()
        print("The potential score for your word is: " + str(self.score) + " points.")
 
    def calculatePotentialScore(self):
        """
        Calculates the potential score (based on the word) and returns it 
        Gabrielle

        Returns:
            int: potential score for word
        """
        for i in self.word:
            self.score += self.letter_dict[i]
        return self.score

    def wordVerification(self, word):
        """Verifies if the word is only using characters, not digits nor 
        non-whitespace-characters
        Gabrielle, regex

        Args:
            word (str): the word being checked

        Returns: 
            bool: True when verified, False if not only characters
        """
        pattern = r"^[a-zA-Z]+$"
        if re.search(pattern, word):
            if len(word) < 4:
                bonus_points = 0
            else:
                bonus_points = len(word) * 2
            self.score += bonus_points
            return True
        else:
            print("Invalid Input Format. Please use only letters!")
            return False

    def results(self, guesses, answered, name="User"):
        """processes the results of a user's guesses.
        Michael, set operations


        Args:
            guesses (int): the number of guesses
            answered (int):  indicates whether the user has correctly answered 
            the word or not
            name (str, optional): name of user
            
        Side Effects:
        Prints to sdout
        """
        self.scoreset = set()

        if answered == 1:
            self.scoreset.add((self.score, guesses))
            print(f"Score, Attempts Remaining: {self.scoreset}")
            print("Congrats! " + str(name) + " got it correct!")
            print(str(name) + " recieved a score of " + str(self.score) + " with " + str(guesses) + " guesses remaining.")
        else:
            print(str(name) + " has run out of guesses and did not get the right answer!")
            print("Sorry " + str(name) + ", Please play again soon!")
            
                

    def gameplay(self, word, guesses, name = "User"):
        """
        This handles how the user interacts with the program (gameplay). the 
        program processes the user inputs and updates guesses when player gets 
        the answer correct or wrong.
        Gabrielle, optional parameters


        Args:
            word (str): the word being guessed
            guesses (int): the number of guesses (only 3) 
            name (str): the name of the player taken as an option param "User".

        Returns:
            int: The number of guesses
        """
        self.__str__()

        user_inp = input("What is your guess? \n")
        flag = False
        while not flag:
            sucess = self.wordVerification(user_inp)
            if sucess:
                flag = True
            else:
                user_inp = input("What is your guess? \n")
        answered = 0
        while guesses > 1 and answered == 0:
            if str(user_inp.lower()) == word.lower():
                answered += 1
                break
            else:
                print("So sorry " + str(name) +" Incorrect guess. Try again!")
                guesses -= 1
                print("You have " + str(guesses) + " remaining.")
                user_inp = input(str(name) +", What is your next guess? \n")
                flag = False
                while not flag:
                    sucess = self.wordVerification(user_inp)
                    if sucess:
                        flag = True
                    else:
                        user_inp = input(str(name) + ", What is your next guess? \n")
        if str(user_inp.lower()) == word.lower() and guesses == 1:
            answered += 1
        self.results(guesses, answered, name)

        return guesses
    
    def get_total(self):
        """
        Handles getting the total score
        Gabrielle

        Returns:
            int: the total score.
        """
        return self.score


def parse_args(arglist):
   """parses the arguments and code given in our main() function
   Jordan, argumentparser class

   Args:
       arglist (str): list of arguments to parse

   Returns:
       str: parsed arguments from those given
   """
   parser = ArgumentParser()
   return parser.parse_args(arglist)


if __name__ == "__main__":
   args = parse_args(sys.argv[1:])
   name = input("Please enter your name: ")
   player1 = Player(name)
   print(GameState())
   game_state = GameState()
   theme = game_state.get_theme()
   game_state = GameState(theme)
   play = True
   totalScore = 0
   while play:
        
        random_word = game_state.select_random_word()
        game_state.scramble(random_word)
        game_state.gameboard()
        running = Outcome(random_word)
        running.gameplay(random_word, player1.incorrect_guesses, name)
        totalScore += running.get_total()
        
        play = game_state.play_again()
        print("the amount of points you have scored so far is " + str(totalScore))
        game_state.get_past_dict()
        if play == True:
            game_state = GameState()
            theme = game_state.get_theme()
            game_state = GameState(theme)
   else:
       sys.exit() 
       